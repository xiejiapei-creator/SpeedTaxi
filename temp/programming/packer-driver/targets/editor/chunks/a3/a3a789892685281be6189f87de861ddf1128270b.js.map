{"version":3,"sources":["file:///Users/xiejiapei/Documents/Car/assets/script/framework/csvManager.ts"],"names":["_decorator","ccclass","CELL_DELIMITERS","LINE_DELIMITERS","getter","index","getterCast","value","cast","d","Array","Number","isNaN","CSV","STANDARD_DECODE_OPTS","skip","limit","header","comment","STANDARD_ENCODE_OPTS","delimiter","newline","quoteMark","doubleQuoteMark","quoteRegex","opts","assign","args","params","prototype","slice","call","arguments","base","rest","i","len","length","attr","map","collection","fn","results","getType","obj","Object","toString","getLimit","buildObjectConstructor","fields","sample","object","setter","forEach","idx","buildArrayConstructor","row","frequency","coll","needle","count","lastIndex","maxIndex","indexOf","mostFrequent","needles","max","detected","cur","unsafeParse","text","lines","split","splice","constructor","cells","line","shift","findIndex","list","item","quoteCount","start","end","key","hasOwnProperty","numKey","parseInt","substring","push","safeParse","encodeCells","replace","join","encodeArrays","lim","encodeObjects","parse","rows","bind","Math","min","floor","encode","csvManager","csvTables","csvTableForArr","tableCast","tableComment","addTable","tableName","tableContent","force","tableData","tableArr","keyName","getTableArr","getTable","queryOne","table","tbItem","queryByID","ID","queryAll","ret","queryIn","values","keys","queryByCondition","condition","tableKeys","tableKeysLength","keysLength","fit","j"],"mappings":"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","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\nimport { Constructor, _decorator } from \"cc\";\nconst { ccclass } = _decorator;\n\nconst CELL_DELIMITERS = [\",\", \";\", \"\\t\", \"|\", \"^\"];\nconst LINE_DELIMITERS = [\"\\r\\n\", \"\\r\", \"\\n\"];\n\ntype Options = { header: string[] | boolean, comment: string[], cast: string[], skip: number, newline: string, delimiter: string, limit: boolean }\n\nconst getter = function (index: number) {\n    return (\"d[\" + index + \"]\");\n};\n\nconst getterCast = function (value: any, index: number, cast: any, d: any) {\n\n    if (cast instanceof Array) {\n        if (cast[index] === \"number\") {\n            return Number(d[index]);\n        } else if (cast[index] === \"boolean\") {\n            return d[index] === \"true\" || d[index] === \"t\" || d[index] === \"1\";\n        } else {\n            return d[index];\n        }\n    } else {\n        if (!isNaN(Number(value))) {\n            return Number(d[index]);\n        } else if (value == \"false\" || value == \"true\" || value == \"t\" || value == \"f\") {\n            return d[index] === \"true\" || d[index] === \"t\" || d[index] === \"1\";\n        } else {\n            return d[index];\n        }\n    }\n};\n\nconst CSV = {\n    //\n\n    /* =========================================\n        * Constants ===============================\n        * ========================================= */\n\n    STANDARD_DECODE_OPTS: {\n        skip: 0,\n        limit: false,\n        header: false,\n        cast: false,\n        comment: \"\"\n    },\n\n    STANDARD_ENCODE_OPTS: {\n        delimiter: CELL_DELIMITERS[0],\n        newline: LINE_DELIMITERS[0],\n        skip: 0,\n        limit: false,\n        header: false\n    },\n\n    quoteMark: '\"',\n    doubleQuoteMark: '\"\"',\n    quoteRegex: /\"/g,\n    opts: {},\n\n    /* =========================================\n        * Utility Functions =======================\n        * ========================================= */\n    assign: function (...args: any[]) {\n        const params = Array.prototype.slice.call(arguments);\n        const base = args[0];\n        const rest = args.slice(1);\n        for (let i = 0, len = rest.length; i < len; i++) {\n            for (const attr in rest[i]) {\n                base[attr] = rest[i][attr];\n            }\n        }\n\n        return base;\n    },\n\n    map: function (collection: any[], fn: (value: any, index: number) => any) {\n        const results = [];\n        for (let i = 0, len = collection.length; i < len; i++) {\n            results[i] = fn(collection[i], i);\n        }\n\n        return results;\n    },\n\n    getType: function (obj: any) {\n        return Object.prototype.toString.call(obj).slice(8, -1);\n    },\n\n    getLimit: function (limit: boolean, len: number) {\n        return limit === false ? len : 1;\n    },\n\n    buildObjectConstructor: function (fields: any[], sample: any[], cast: any) {\n        return function (d: any) {\n            const object: any = {};\n            const setter = function (attr: string, value: any) {\n                return object[attr] = value;\n            };\n\n            if (cast) {\n                fields.forEach((attr, idx) => {\n                    setter(attr, getterCast(sample[idx], idx, cast, d));\n                });\n            } else {\n                fields.forEach((attr, idx) => {\n                    setter(attr, getterCast(sample[idx], idx, null, d));\n                });\n            }\n            // body.push(\"return object;\");\n            // body.join(\";\\n\");\n            return object;\n        };\n    },\n\n    buildArrayConstructor: function (fields: any[], sample: any[], cast: any) {\n        return function (d: any) {\n            const row = new Array(sample.length);\n            const setter = function (idx: number, value: number) {\n                return row[idx] = value;\n            };\n            if (cast) {\n                fields.forEach(function (attr, idx) {\n                    setter(attr, getterCast(sample[idx], idx, cast, d));\n                });\n            } else {\n                fields.forEach(function (attr, idx) {\n                    setter(attr, getterCast(sample[idx], idx, null, d));\n                });\n            }\n            return row;\n        };\n    },\n\n    frequency: function (coll: string, needle: string, limit?: boolean) {\n        if (limit === void 0) limit = false;\n\n        let count = 0;\n        let lastIndex = 0;\n        const maxIndex = this.getLimit(limit, coll.length);\n\n        while (lastIndex < maxIndex) {\n            lastIndex = coll.indexOf(needle, lastIndex);\n            if (lastIndex === -1) break;\n            lastIndex += 1;\n            count++;\n        }\n\n        return count;\n    },\n\n    mostFrequent: function (coll: string, needles:string[], limit?: boolean) {\n        const max = 0;\n        let detected = '';\n\n        for (let cur = needles.length - 1; cur >= 0; cur--) {\n            if (this.frequency(coll, needles[cur], limit) > max) {\n                detected = needles[cur];\n            }\n        }\n\n        return detected || needles[0];\n    },\n\n    unsafeParse: function (text: string, opts: Options, fn: Function) {\n        const lines = text.split(opts.newline!);\n\n        if (opts.skip > 0) {\n            lines.splice(opts.skip);\n        }\n\n        let fields: any;\n        let constructor;\n\n        function cells(lines: any[]) {\n            let line = lines.shift()!;\n            if (line.indexOf('\"') >= 0) {// 含引号\n\n                // 找到这行完整的数据, 找到对称的双引号\n                let lastIndex = 0;\n                let findIndex = 0;\n                let count = 0;\n                while (lines.length > 0) {\n                    lastIndex = line.indexOf('\"', findIndex);\n                    if (lastIndex === -1 && count % 2 === 0) break;\n\n                    if (lastIndex !== -1) {\n                        findIndex = lastIndex + 1;\n                        count++;\n                    } else {\n                        line = line + opts.newline + lines.shift();\n                    }\n                }\n\n                const list = [];\n                let item;\n\n                let quoteCount = 0;\n\n                let start = 0;\n                let end = 0;\n                const length = line.length;\n                for (let key in line) {\n                    if (!line.hasOwnProperty(key)) {\n                        continue;\n                    }\n\n                    let numKey = parseInt(key);\n                    const value = line[key];\n\n                    if (numKey === 0 && value === '\"') {\n                        quoteCount++;\n                        start = 1;\n                    }\n\n                    if (value === '\"') {\n                        quoteCount++;\n\n                        if (line[numKey - 1] === opts.delimiter && start === numKey) {\n                            start++;\n                        }\n                    }\n\n                    if (value === '\"' && quoteCount % 2 === 0) {\n\n                        if (line[numKey + 1] === opts.delimiter || numKey + 1 === length) {\n                            end = numKey;\n                            item = line.substring(start, end);\n                            list.push(item);\n                            start = end + 2;\n                            end = start;\n                        }\n\n                    }\n\n                    if (value === opts.delimiter && quoteCount % 2 === 0) {\n                        end = numKey;\n                        if (end > start) {\n                            item = line.substring(start, end);\n                            list.push(item);\n                            start = end + 1;\n                            end = start;\n                        } else if (end === start) {\n                            list.push(\"\");\n                            start = end + 1;\n                            end = start;\n                        }\n                    }\n\n                }\n\n                end = length;\n\n                if (end >= start) {\n                    item = line.substring(start, end);\n                    list.push(item);\n                }\n\n                return list;\n            } else {\n                return line.split(opts.delimiter);\n            }\n        }\n\n        if (opts.header) {\n            if (opts.header === true) {\n                opts.comment = cells(lines); // 第一行是注释\n                opts.cast = cells(lines); // 第二行是数据类型\n                fields = cells(lines);\n            } else if (this.getType(opts.header) === \"Array\") {\n                fields = opts.header;\n            }\n\n            constructor = this.buildObjectConstructor(fields, lines[0].split(opts.delimiter), opts.cast);\n        } else {\n            constructor = this.buildArrayConstructor(fields as any[], lines[0].split(opts.delimiter), opts.cast);\n        }\n\n        while (lines.length > 0) {\n            const row = cells(lines);\n            if (row.length > 1) {\n                fn(constructor(row), fields[0]);\n            }\n        }\n\n        return true;\n    },\n\n    safeParse: function (text: string, opts: Options) {\n        const newline = opts.newline;\n\n        const lines = text.split(newline);\n        if (opts.skip > 0) {\n            lines.splice(opts.skip);\n        }\n\n        return true;\n    },\n\n    encodeCells: function (line: string[], delimiter: any, newline: any) {\n        const row = line.slice(0);\n        for (let i = 0, len = row.length; i < len; i++) {\n            if (row[i].indexOf(this.quoteMark) !== -1) {\n                row[i] = row[i].replace(this.quoteRegex, this.doubleQuoteMark);\n            }\n\n            if (row[i].indexOf(delimiter) !== -1 || row[i].indexOf(newline) !== -1) {\n                row[i] = this.quoteMark + row[i] + this.quoteMark;\n            }\n        }\n\n        return row.join(delimiter);\n    },\n\n    encodeArrays: function (coll: any, opts: Options, fn: (value: string) => void) {\n        const delimiter = opts.delimiter;\n        const newline = opts.newline;\n\n        if (opts.header && this.getType(opts.header) === \"Array\") {\n            fn(this.encodeCells(opts.header as any[], delimiter, newline));\n        }\n\n        for (let cur = 0, lim = this.getLimit(opts.limit, coll.length); cur < lim; cur++) {\n            fn(this.encodeCells(coll[cur], delimiter, newline));\n        }\n\n        return true;\n    },\n\n    encodeObjects: function (coll: any[], opts: Options, fn: (value: string) => void) {\n        const delimiter = opts.delimiter;\n        const newline = opts.newline;\n        let header: string[] = [];\n        let row: string[] = [];\n        for (const key in coll[0]) {\n            header.push(key);\n            row.push(coll[0][key]);\n        }\n\n        if (opts.header === true) {\n            fn(this.encodeCells(header, delimiter, newline));\n        } else if (this.getType(opts.header) === \"Array\") {\n            fn(this.encodeCells(opts.header as string[], delimiter, newline));\n        }\n\n        fn(this.encodeCells(row, delimiter, '\\n'));\n\n        for (let cur = 1, lim = this.getLimit(opts.limit, coll.length); cur < lim; cur++) {\n            row = [];\n            for (let i = 0, len = header.length; i < len; i++) {\n                row.push(coll[cur][header[i]]);\n            }\n\n            fn(this.encodeCells(row, delimiter, newline));\n        }\n\n        return true;\n    },\n\n    parse: function (text: string, opts: any, fn: any) {\n        let rows: any[] = [];\n\n        if (this.getType(opts) === \"Function\") {\n            fn = opts;\n            opts = {};\n        } else if (this.getType(fn) !== \"Function\") {\n            fn = rows.push.bind(rows);\n        }\n\n        opts = this.assign({}, this.STANDARD_DECODE_OPTS, opts);\n        this.opts = opts;\n\n        if (!opts.delimiter || !opts.newline) {\n            const limit = Math.min(48, Math.floor(text.length / 20), text.length);\n            opts.delimiter = opts.delimiter || this.mostFrequent(text, CELL_DELIMITERS, limit !== 0);\n            opts.newline = opts.newline || this.mostFrequent(text, LINE_DELIMITERS, limit !== 0);\n        }\n\n        // modify by jl 由表自行控制不要含有双引号.提高解析效率\n        return this.unsafeParse(text, opts, fn) &&\n            (rows.length > 0 ? rows : true);\n    },\n\n    encode: function (coll: string, opts: Options, fn: any) {\n        let lines: any[] = [];\n\n        if (this.getType(opts) === \"Function\") {\n            fn = opts;\n            // opts = {};\n        } else if (this.getType(fn) !== \"Function\") {\n            lines = [];\n            fn = lines.push.bind(lines);\n        }\n\n        opts = this.assign({}, this.STANDARD_ENCODE_OPTS, opts);\n\n        if (opts.skip > 0) {\n            coll = coll.slice(opts.skip);\n        }\n\n        return (this.getType(coll[0]) === \"Array\" ? this.encodeArrays : this.encodeObjects)(coll, opts, fn) &&\n            (lines.length > 0 ? lines.join(opts.newline) : true);\n    }\n};\n\ntype ObjType<T = any> = Constructor<T>;\n// type ObjData<T> =\n\n@ccclass(\"csvManager\")\nexport class csvManager {\n    /* class member could be defined like this */\n\n    csvTables: any = {};\n    csvTableForArr: any = {};\n    tableCast: any = {};\n    tableComment: any = {};\n\n    addTable(tableName: string, tableContent: string, force?: boolean) {\n        if (this.csvTables[tableName] && !force) {\n            return;\n        }\n\n        const tableData: any = {};\n        const tableArr: any[] = [];\n        const opts = { header: true };\n        CSV.parse(tableContent, opts, (row: any, keyName: string) => {\n            tableData[row[keyName]] = row;\n            tableArr.push(row);\n        });\n\n        this.tableCast[tableName] = (CSV as any).opts.cast;\n        this.tableComment[tableName] = (CSV as any).opts.comment;\n\n        this.csvTables[tableName] = tableData;\n        this.csvTableForArr[tableName] = tableArr;\n\n        //this.csvTables[tableName].initFromText(tableContent);\n    }\n\n    getTableArr(tableName: string) {\n        return this.csvTableForArr[tableName];\n    }\n\n    getTable(tableName: string) {\n        return this.csvTables[tableName];\n    }\n\n    queryOne(tableName: string, key: string | null, value: any) {\n        const table = this.getTable(tableName);\n        if (!table) {\n            return null;\n        }\n\n        if (key) {\n            for (const tbItem in table) {\n                if (!table.hasOwnProperty(tbItem)) {\n                    continue;\n                }\n\n                if (table[tbItem][key] === value) {\n                    return table[tbItem];\n                }\n            }\n        } else {\n            return table[value];\n        }\n    }\n\n    queryByID(tableName: string, ID: string) {\n        return this.queryOne(tableName, null, ID);\n    }\n\n    queryAll(tableName: string, key: string, value: any) {\n        const table = this.getTable(tableName);\n        if (!table || !key) {\n            return null;\n        }\n\n        const ret: { [name: string]: any } = {};\n        for (const tbItem in table) {\n            if (!table.hasOwnProperty(tbItem)) {\n                continue;\n            }\n\n            if (table[tbItem][key] === value) {\n                ret[tbItem] = table[tbItem];\n            }\n        }\n\n        return ret;\n    }\n\n    queryIn(tableName: string, key: string, values: Array<any>) {\n        const table = this.getTable(tableName);\n        if (!table || !key) {\n            return null;\n        }\n\n        const ret: { [name: string]: any } = {};\n        const keys = Object.keys(table);\n        const length = keys.length;\n        for (let i = 0; i < length; i++) {\n            const item = table[keys[i]];\n            if (values.indexOf(item[key]) > -1) {\n                ret[keys[i]] = item;\n            }\n        }\n\n        return ret;\n    }\n\n    queryByCondition(tableName: string, condition: any) {\n        if (condition.constructor !== Object) {\n            return null;\n        }\n\n        const table = this.getTable(tableName);\n        if (!table) {\n            return null;\n        }\n\n        const ret: { [keu: string]: any } = {};\n        const tableKeys = Object.keys(table);\n        const tableKeysLength = tableKeys.length;\n        const keys = Object.keys(condition);\n        const keysLength = keys.length;\n        for (let i = 0; i < tableKeysLength; i++) {\n            const item = table[tableKeys[i]];\n            let fit = true;\n            for (let j = 0; j < keysLength; j++) {\n                const key = keys[j];\n                fit = fit && (condition[key].indexOf(item[key]) > -1 && !ret[tableKeys[i]]);\n            }\n\n            if (fit) {\n                ret[tableKeys[i]] = item;\n            }\n        }\n\n        return ret;\n    }\n}\n"]}