{"version":3,"sources":["file:///Users/xiejiapei/Documents/Car/assets/script/i18nMaster/runtime-scripts/LanguageData.ts"],"names":["i18n","loadLanguageData","language","window","i18nConfig","languages","initPolyglot","data","polyInst","replace","phrases","allowMissing","director","Polyglot","curLang","init","inst","t","key","opt","Object","keys","length","console","warn","updateSceneRenderers","rootNodes","getScene","children","allLocalizedLabels","i","labels","getComponentsInChildren","Array","prototype","push","apply","label","node","active","updateLabel","allLocalizedSprites","sprites","sprite","updateSprite"],"mappings":"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","sourcesContent":["// const Polyglot = require('polyglot.min');\n\nimport { director } from 'cc';\nimport { Polyglot } from './polyglot.min';\n\ndeclare global {\n    namespace globalThis {\n        var i18nConfig: any;\n    }\n}\n\nlet polyInst: Polyglot;\nif (!window.i18nConfig) {\n    window.i18nConfig = {\n        languages: {},\n        curLang:''\n    };\n}\n\n// if (CC_EDITOR) {\n//     Editor.Profile.load('profile://project/i18n.json', (err, profile) => {\n//         window.i18nConfig.curLang = profile.data['default_language'];\n//         if (polyInst) {\n//             let data = loadLanguageData(window.i18nConfig.curLang) || {};\n//             initPolyglot(data);\n//         }\n//     });\n// }\n\nfunction loadLanguageData (language: string) {\n    //@ts-ignore\n    return window.i18nConfig.languages[language];\n}\n\nfunction initPolyglot (data: any) {\n    if (data) {\n        if (polyInst) {\n            polyInst.replace(data);\n        } else {\n            polyInst = new Polyglot({ phrases: data, allowMissing: true });\n        }\n    }\n}\n\n// module.exports = {\nexport class i18n {\n    static inst: any = null;\n\n    /**\n     * This method allow you to switch language during runtime, language argument should be the same as your data file name\n     * such as when language is 'zh', it will load your 'zh.js' data source.\n     * @method init\n     * @param language - the language specific data file name, such as 'zh' to load 'zh.js'\n     */\n    static init (language?: string) {\n        if (!language || language === window.i18nConfig.curLang) {\n            return;\n        }\n        let data = loadLanguageData(language) || {};\n        window.i18nConfig.curLang = language;\n        initPolyglot(data);\n        this.inst = polyInst;\n    }\n    /**\n     * this method takes a text key as input, and return the localized string\n     * Please read https://github.com/airbnb/polyglot.js for details\n     * @method t\n     * @return {String} localized string\n     * @example\n     *\n     * var myText = i18n.t('MY_TEXT_KEY');\n     *\n     * // if your data source is defined as\n     * // {\"hello_name\": \"Hello, %{name}\"}\n     * // you can use the following to interpolate the text\n     * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\n     */\n    static t (key: any, opt ?: object) {\n        if (Object.keys(polyInst.phrases).length === 0) {\n            let data = loadLanguageData(window.i18nConfig.curLang) || {};\n            initPolyglot(data);\n            console.warn('###防止出现parses数据丢失，重新替换数据');\n        }\n        if (polyInst) {\n            return polyInst.t(key, opt);\n        }\n    }\n\n    // inst: polyInst\n\n    updateSceneRenderers () { // very costly iterations\n        let rootNodes = director.getScene()!.children;\n        // walk all nodes with localize label and update\n        let allLocalizedLabels: any[] = [];\n        for (let i = 0; i < rootNodes.length; ++i) {\n            let labels = rootNodes[i].getComponentsInChildren('LocalizedLabel');\n            Array.prototype.push.apply(allLocalizedLabels, labels);\n        }\n        for (let i = 0; i < allLocalizedLabels.length; ++i) {\n            let label = allLocalizedLabels[i];\n            if(!label.node.active)continue;\n            label.updateLabel();\n        }\n        // walk all nodes with localize sprite and update\n        let allLocalizedSprites: any[] = [];\n        for (let i = 0; i < rootNodes.length; ++i) {\n            let sprites = rootNodes[i].getComponentsInChildren('LocalizedSprite');\n            Array.prototype.push.apply(allLocalizedSprites, sprites);\n        }\n        for (let i = 0; i < allLocalizedSprites.length; ++i) {\n            let sprite = allLocalizedSprites[i];\n            if(!sprite.node.active)continue;\n            sprite.updateSprite(window.i18nConfig.curLang);\n        }\n    }\n};\n"]}