{"version":3,"sources":["file:///Users/xiejiapei/SpeedTaxi/assets/script/framework/eventListener.ts"],"names":["log","_decorator","ccclass","property","oneToOneListener","handle","on","eventName","handler","target","off","oldObj","dispatchEvent","objHandler","apply","eventListener","getBaseClass","type"],"mappings":";;;;;;;;AAAgBA,MAAAA,G,OAAAA,G;AAAKC,MAAAA,U,OAAAA,U;;;;;;;OACf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBF,U;AAUxBG,MAAAA,gB,WADLF,OAAO,CAAC,kBAAD,C,gBAAR,MACME,gBADN,CACuB;AAAA;AAAA,eACnBC,MADmB,GACC,EADD;AAAA;;AAGnB;AACAC,QAAAA,EAAE,CAAEC,SAAF,EAAqBC,OAArB,EAAwCC,MAAxC,EAAsD;AACpD,eAAKJ,MAAL,CAAYE,SAAZ,IAAyB;AAAEC,YAAAA,OAAO,EAAEA,OAAX;AAAoBC,YAAAA,MAAM,EAAEA;AAA5B,WAAzB;AACH,SANkB,CAQnB;;;AACAC,QAAAA,GAAG,CAAEH,SAAF,EAAqBC,OAArB,EAAwC;AACvC,gBAAMG,MAAM,GAAG,KAAKN,MAAL,CAAYE,SAAZ,CAAf;;AACA,cAAII,MAAM,IAAIA,MAAM,CAACH,OAAjB,IAA4BG,MAAM,CAACH,OAAP,KAAmBA,OAAnD,EAA4D;AACxD,mBAAO,KAAKH,MAAL,CAAYE,SAAZ,CAAP;AACH;AACJ,SAdkB,CAgBnB;;;AACAK,QAAAA,aAAa,CAAEL,SAAF,EAAqB;AAC9B,gBAAMM,UAAU,GAAG,KAAKR,MAAL,CAAYE,SAAZ,CAAnB;;AAEA,cAAIM,UAAU,CAACL,OAAf,EAAwB;AACpBK,YAAAA,UAAU,CAACL,OAAX,CAAmBM,KAAnB,CAAyBD,UAAU,CAACJ,MAApC;AACH,WAFD,MAEO;AACHT,YAAAA,GAAG,CAAC,kBAAkBO,SAAlB,GAA8B,mBAA/B,CAAH;AACH;AACJ;;AAzBkB,O;AA0BtB;;+BAIYQ,a,YADZb,OAAO,CAAC,eAAD,C,kBAAR,MACaa,aADb,CAC2B;AACG,eAAZC,YAAY,CAAEC,IAAF,EAAe;AACrC,iBAAOb,gBAAP;AACH;;AAHsB,O","sourcesContent":["import { error, log, _decorator } from \"cc\";\nconst { ccclass, property } = _decorator;\n\ninterface IEvent{\n    handler: Function;\n    target?: Node\n}\n\ntype EventList = { [name: string]: IEvent};\n\n@ccclass(\"oneToOneListener\")\nclass oneToOneListener {\n    handle: EventList = {};\n\n    // 注册监听事件\n    on (eventName: string, handler: Function, target: Node) {\n        this.handle[eventName] = { handler: handler, target: target };\n    }\n\n    // 取消监听事件\n    off (eventName: string, handler: Function) {\n        const oldObj = this.handle[eventName];\n        if (oldObj && oldObj.handler && oldObj.handler === handler) {\n            delete this.handle[eventName];\n        }\n    }\n\n    // 派发事件\n    dispatchEvent (eventName: string) {\n        const objHandler = this.handle[eventName];\n\n        if (objHandler.handler) {\n            objHandler.handler.apply(objHandler.target);\n        } else {\n            log(\"not register \" + eventName + \"    callback func\");\n        }\n    }\n};\n\n\n@ccclass(\"eventListener\")\nexport class eventListener {\n    public static getBaseClass (type:string) {\n        return oneToOneListener;\n    }\n}"]}