{"version":3,"sources":["file:///Users/xiejiapei/SpeedTaxi/assets/script/fight/carManager.ts"],"names":["Vec3","_decorator","Component","macro","car","follow","roadPoint","clientEvent","resourceUtil","poolManager","playerData","constant","localConfig","fightConstants","ccclass","property","carManager","type","start","onEnable","on","showInvincible","onDisable","off","mainCar","isInvincible","init","fightMap","customerManager","_fightMap","_customerManager","creatMainCar","instance","showCar","INITIAL_CAR","carInfo","queryByID","toString","skin","model","MIN_CAR_ID","getCar","err","pfCar","console","error","putNode","node","nodeCar","getNode","getComponent","markMainCar","setEntry","path","manager","maxProgress","levelProgressCnt","setMoveOverListener","followCamera","followTarget","showStart","preloadAICar","callback","arrPreload","idx","length","nodeRoadPoint","point","ROAD_POINT_TYPE","AI_START","arrCars","cars","split","indexOf","push","cur","getCarsBatch","arg","dispatchEvent","startGenerateEnemy","genAICar","bind","startGenerateCar","stopGenerateEnemy","stopGenerateCar","road","randCar","otherCar","minSpeed","carSpeed","maxSpeed","startRunning","reset","recycleAllAICar","children","forEach","isMain","recycleLimitAICar","distance","worldPosition","Math","abs","isOver","controlMainCar","isRunning","stopRunning","startGame","startWithMinSpeed","schedule","checkCarIsCloser","REPEAT_FOREVER","gameOver","unschedule","carScript","stopImmediately","changeCameraFollowRotation","isFollowRotation","getCurrentProgress","curProgress","hasCustomer","revive","isCarMoving","nodeMainCar","posMainCar","getWorldPosition","posCar","forward","x","z","tooting"],"mappings":"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","sourcesContent":["import { Vec3 } from 'cc';\nimport { _decorator, Component, Prefab, Node, instantiate, macro } from \"cc\";\nimport { fightMap } from \"./fightMap\";\nimport { car } from \"./car\";\nimport { customerManager } from \"./customerManager\";\nimport { follow } from \"./follow\";\nimport { roadPoint } from \"./roadPoint\";\nimport { clientEvent } from \"../framework/clientEvent\";\nimport { resourceUtil } from \"../framework/resourceUtil\";\nimport { poolManager } from \"../framework/poolManager\";\nimport { playerData } from \"../framework/playerData\";\nimport { constant } from \"../framework/constant\";\nimport { localConfig } from \"../framework/localConfig\";\nimport { fightConstants } from \"./fightConstants\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"carManager\")\nexport class carManager extends Component {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    // @property\n    // serializableDummy = 0;\n    _fightMap!: fightMap;\n    _customerManager!: customerManager;\n\n    mainCar!: car;\n\n    @property({type: follow})\n    followCamera: follow = null!;\n\n    start () {\n        // Your initialization goes here.\n    }\n\n    onEnable() {\n        clientEvent.on('showInvincible', this.showInvincible, this);\n    }\n\n    onDisable() {\n        clientEvent.off('showInvincible', this.showInvincible, this);\n    }\n\n    showInvincible () {\n        if (this.mainCar) {\n            this.mainCar.isInvincible = true;\n        }\n    }\n\n    init (fightMap: fightMap, customerManager: customerManager) {\n        this._fightMap = fightMap;\n        this._customerManager = customerManager;\n\n        this.creatMainCar();\n    }\n\n    creatMainCar () {\n        let car = playerData.instance.showCar ? playerData.instance.showCar: constant.INITIAL_CAR;\n        let carInfo = localConfig.instance.queryByID('car', car.toString());\n        let skin = carInfo ? carInfo.model: constant.MIN_CAR_ID;\n\n        resourceUtil.getCar(skin, (err, pfCar)=>{\n            if (err) {\n                console.error(err);\n                return;\n            }\n\n            if (this.mainCar) {\n                poolManager.instance.putNode(this.mainCar.node);\n            }\n\n            let nodeCar = poolManager.instance.getNode(pfCar, this.node);\n            this.mainCar = nodeCar.getComponent('car') as car;\n            this.mainCar.markMainCar(true);\n            this.mainCar.setEntry(this._fightMap.path[0]);\n            this.mainCar.manager = this._customerManager;\n            this.mainCar.maxProgress = this._fightMap.levelProgressCnt;\n            this.mainCar.setMoveOverListener(()=>{\n\n            });\n\n            this.followCamera.followTarget = nodeCar;\n            this.followCamera.showStart();\n        })\n\n        // this.nodeTailLine = instantiate(this.pfTailLine);\n        // this.nodeTailLine.parent = this.node;\n        // this.nodeTailLine.active = false;\n    }\n\n    //预加载所有ai车辆\n    preloadAICar (callback: Function) {\n        let arrPreload = [];\n        for (let idx = 1; idx < this._fightMap.path.length; idx++) {\n            let nodeRoadPoint = this._fightMap.path[idx];\n            let point = nodeRoadPoint.getComponent(roadPoint)!;\n\n            if (point.type !== fightConstants.ROAD_POINT_TYPE.AI_START) {\n                return;\n            }\n\n            let arrCars = point.cars.split(',');\n            for (let idx = 0; idx < arrCars.length; idx++) {\n                if (arrPreload.indexOf(arrCars[idx]) === -1) {\n                    arrPreload.push(arrCars[idx]);\n                }\n            }\n        }\n\n        let cur = 0;\n        resourceUtil.getCarsBatch(arrPreload, (arg)=>{\n            //批量加载，每一辆，先加载2%\n            cur++;\n            if (cur <= 15) {\n                clientEvent.dispatchEvent('updateLoading', 2);\n            }\n        }, ()=>{\n            if (cur <= 15) {\n                clientEvent.dispatchEvent('updateLoading', 30 - cur * 2);\n            }\n            callback && callback();\n        });\n    }\n\n    startGenerateEnemy () {\n        this.genAICar = this.genAICar.bind(this);\n        for (let idx = 1; idx < this._fightMap.path.length; idx++) {\n            let nodeRoadPoint = this._fightMap.path[idx];\n            let point = nodeRoadPoint.getComponent(roadPoint)!;\n            point.startGenerateCar(this.genAICar);\n        }\n    }\n\n    stopGenerateEnemy () {\n        for (let idx = 1; idx < this._fightMap.path.length; idx++) {\n            let nodeRoadPoint = this._fightMap.path[idx];\n            let point = nodeRoadPoint.getComponent(roadPoint)!;\n            point.stopGenerateCar();\n        }\n    }\n\n    genAICar (road: roadPoint, randCar: string) {\n        //应该动态生成\n        resourceUtil.getCar(randCar, (err, pfCar)=>{\n            if (err) {\n                console.error(err);\n                return;\n            }\n\n            let otherCar = poolManager.instance.getNode(pfCar, this.node);\n\n            let car = otherCar.getComponent('car') as car;\n            car.setEntry(road.node);\n            car.minSpeed = road.carSpeed;\n            car.maxSpeed = road.carSpeed;\n            car.startRunning();\n            car.markMainCar(false);\n            car.setMoveOverListener((car: car)=>{\n                poolManager.instance.putNode(car.node);\n            });\n        });\n    }\n\n    reset () {\n        this.mainCar.setEntry(this._fightMap.path[0]);\n        this.mainCar.maxProgress = this._fightMap.levelProgressCnt;\n\n        this.followCamera.followTarget = this.mainCar.node;\n\n        this.stopGenerateEnemy();\n\n        this.recycleAllAICar();\n    }\n\n    /**\n     *回收所有地方车辆\n     *\n     * @memberof carManager\n     */\n    recycleAllAICar () {\n        let arrCars: Node[] = [];\n        let children = this.node.children;\n        children.forEach((nodeCar)=>{\n            arrCars.push(nodeCar);\n        }, this);\n\n        arrCars.forEach((nodeCar)=>{\n            let car = nodeCar.getComponent('car') as car;\n            if (car && !car.isMain) {\n                //车辆回收\n                poolManager.instance.putNode(nodeCar);\n            }\n        });\n    }\n\n    /**\n     *回收指定范围大小车辆\n     *\n     * @memberof carManager\n     */\n    recycleLimitAICar () {\n        let arrCars: Node[] = [];\n        let children = this.node.children;\n        children.forEach((nodeCar)=>{\n            arrCars.push(nodeCar);\n        }, this);\n\n        arrCars.forEach((nodeCar)=>{\n            let car = nodeCar.getComponent('car') as car;\n            let distance = Vec3.distance(nodeCar.worldPosition, this.mainCar.node.worldPosition);\n            if (car && !car.isMain && Math.abs(distance) <= 5) {\n                //车辆回收\n                poolManager.instance.putNode(nodeCar);\n            } else {\n                car.isOver = false;\n                car.startRunning();\n            }\n        });\n    }\n\n    /**\n     * 由UI层调用，控制车辆行驶\n     * @param isRunning\n     */\n    controlMainCar (isRunning: boolean) {\n        if (isRunning) {\n            clientEvent.dispatchEvent('showGuide', false);\n            this.mainCar.startRunning();\n        } else {\n            this.mainCar.stopRunning();\n        }\n    }\n\n    startGame () {\n        clientEvent.dispatchEvent('showGuide', true);\n        this.mainCar.startWithMinSpeed();\n        this.startGenerateEnemy();\n\n        //开启定时检测车辆跟AI车辆是否相近\n        this.schedule(this.checkCarIsCloser, 0.2, macro.REPEAT_FOREVER); //每0.2s检测一次\n    }\n\n    gameOver () {\n        this.followCamera.followTarget = null; //将镜头跟随移除，免得一直晃\n        this.stopGenerateEnemy();\n\n        //取消车辆的定时检测\n        this.unschedule(this.checkCarIsCloser);\n\n        //将其余车给停下来\n        this.node.children.forEach((nodeCar)=>{\n            let carScript = nodeCar.getComponent(car)!;\n            carScript.stopImmediately();\n        });\n    }\n\n    changeCameraFollowRotation () {\n        //镜头方式修改\n        this.followCamera.isFollowRotation = !this.followCamera.isFollowRotation;\n    }\n\n    /**\n     * 获取当前关卡进度\n     *\n     * @memberof carManager\n     */\n    getCurrentProgress () {\n\n        return {cur: this.mainCar.curProgress, isOver: !this.mainCar.hasCustomer};\n    }\n\n    revive () {\n        this.recycleLimitAICar();\n        this.mainCar.revive();\n        this.followCamera.followTarget = this.mainCar.node;\n        this.startGenerateEnemy();\n    }\n\n    checkCarIsCloser () {\n        if (!this.mainCar.isCarMoving) {\n            return;//车辆没有在移动，不需要检测\n        }\n\n        let nodeMainCar = this.mainCar.node;\n        let posMainCar = nodeMainCar.getWorldPosition();\n        this.node.children.forEach((nodeCar)=>{\n            if (nodeCar !== nodeMainCar) {\n                let posCar = nodeCar.getWorldPosition();\n                let forward = nodeCar.forward;\n                posCar.x -= forward.x;\n                posCar.z -= forward.z;\n\n                if (Math.abs(posCar.x - posMainCar.x) < 2 && Math.abs(posCar.z - posMainCar.z) < 2) {\n                    nodeCar.getComponent(car)!.tooting();\n                }\n            }\n        });\n    }\n}\n"]}