{"version":3,"sources":["file:///Users/xiejiapei/SpeedTaxi/assets/script/i18nMaster/runtime-scripts/polyglot.min.ts"],"names":["Polyglot","trim","x","replace","langToTypeMap","mapping","ret","forEach","langs","type","lang","pluralTypeName","pluralRules","locale","langToPluralType","pluralTypeToLanguages","split","call","en","pluralTypeIndex","count","pluralTypes","escape","token","constructTokenRegex","opts","prefix","suffix","delimiter","RangeError","RegExp","transformPhrase","phrase","substitutions","tokenRegex","TypeError","result","interpolationRegex","defaultTokenRegex","pluralRulesOrDefault","defaultPluralRules","options","smart_count","texts","expression","argument","has","polyglot","arr","fn","target","arguments","Function","Array","isArray","item","idx","array","key","hasOwnProperty","element","warning","message","console","warn","obj","String","prototype","russianPluralGroups","n","lastTwo","end","arabic","bosnian_serbian","chinese","croatian","french","german","russian","lithuanian","czech","polish","icelandic","slovenian","constructor","phrases","currentLocale","onMissingKey","extend","allowMissing","interpolation","t","_","newPhrases","clear","newLocale","morePhrases","_this","prefixedKey","unset"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;;;;;iBAuNaA,Q;;AAzLb,WAASC,IAAT,CAAcC,CAAd,EAAiB;AACf,WAAOA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAwB,EAAxB,CAAP;AACD;;AAyFD,WAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,QAAIC,GAAG,GAAG,EAAV;AACAC,IAAAA,OAAO,CAACF,OAAD,EAAU,UAAUG,KAAV,EAAiBC,IAAjB,EAAuB;AACtCF,MAAAA,OAAO,CAACC,KAAD,EAAQ,UAAUE,IAAV,EAAgB;AAC7BJ,QAAAA,GAAG,CAACI,IAAD,CAAH,GAAYD,IAAZ;AACD,OAFM,EAEJ,IAFI,CAAP;AAGD,KAJM,EAIJ,IAJI,CAAP;AAKA,WAAOH,GAAP;AACD;;AAED,WAASK,cAAT,CAAwBC,WAAxB,EAAqCC,MAArC,EAA6C;AAC3C,QAAIC,gBAAgB,GAAGV,aAAa,CAACQ,WAAW,CAACG,qBAAb,CAApC,CAD2C,CAE3C;;AACA,WAAOD,gBAAgB,CAACD,MAAD,CAAhB,IAA4BC,gBAAgB,CAACE,KAAK,CAACC,IAAN,CAAWJ,MAAX,EAAmB,GAAnB,EAAwB,CAAxB,EAA2B,CAA3B,CAAD,CAA5C,IAA+EC,gBAAgB,CAACI,EAAvG;AACD;;AAED,WAASC,eAAT,CAAyBP,WAAzB,EAAsCC,MAAtC,EAA8CO,KAA9C,EAAqD;AACnD,WAAOR,WAAW,CAACS,WAAZ,CAAwBV,cAAc,CAACC,WAAD,EAAcC,MAAd,CAAtC,EAA6DO,KAA7D,CAAP;AACD;;AAED,WAASE,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,WAAOA,KAAK,CAACpB,OAAN,CAAc,qBAAd,EAAqC,MAArC,CAAP;AACD;;AAED,WAASqB,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,QAAIC,MAAM,GAAID,IAAI,IAAIA,IAAI,CAACC,MAAd,IAAyB,IAAtC;AACA,QAAIC,MAAM,GAAIF,IAAI,IAAIA,IAAI,CAACE,MAAd,IAAyB,GAAtC;;AAEA,QAAID,MAAM,KAAKE,SAAX,IAAwBD,MAAM,KAAKC,SAAvC,EAAkD;AAChD,YAAM,IAAIC,UAAJ,CAAe,MAAMD,SAAN,GAAkB,uCAAjC,CAAN;AACD;;AAED,WAAO,IAAIE,MAAJ,CAAWR,MAAM,CAACI,MAAD,CAAN,GAAiB,OAAjB,GAA2BJ,MAAM,CAACK,MAAD,CAA5C,EAAsD,GAAtD,CAAP;AACD;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASI,eAAT,CAAyBC,MAAzB,EAAiCC,aAAjC,EAAgDpB,MAAhD,EAAwDqB,UAAxD,EAAoEtB,WAApE,EAAiF;AAC/E,QAAI,OAAOoB,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,IAAIG,SAAJ,CAAc,2DAAd,CAAN;AACD;;AAED,QAAIF,aAAa,IAAI,IAArB,EAA2B;AACzB,aAAOD,MAAP;AACD;;AAED,QAAII,MAAM,GAAGJ,MAAb;AACA,QAAIK,kBAAkB,GAAGH,UAAU,IAAII,iBAAvC;AACA,QAAIC,oBAAoB,GAAG3B,WAAW,IAAI4B,kBAA1C,CAX+E,CAa/E;;AACA,QAAIC,OAAO,GAAG,OAAOR,aAAP,KAAyB,QAAzB,GAAoC;AAAES,MAAAA,WAAW,EAAET;AAAf,KAApC,GAAqEA,aAAnF,CAd+E,CAgB/E;AACA;AACA;;AACA,QAAIQ,OAAO,CAACC,WAAR,IAAuB,IAAvB,IAA+BN,MAAnC,EAA2C;AACzC,UAAIO,KAAK,GAAG3B,KAAK,CAACC,IAAN,CAAWmB,MAAX,EAAmBR,SAAnB,CAAZ;AACAQ,MAAAA,MAAM,GAAGnC,IAAI,CAAC0C,KAAK,CAACxB,eAAe,CAACoB,oBAAD,EAAuB1B,MAAM,IAAI,IAAjC,EAAuC4B,OAAO,CAACC,WAA/C,CAAhB,CAAL,IAAqFC,KAAK,CAAC,CAAD,CAA3F,CAAb;AACD,KAtB8E,CAwB/E;;;AACAP,IAAAA,MAAM,GAAGjC,OAAO,CAACc,IAAR,CAAamB,MAAb,EAAqBC,kBAArB,EAAyC,UAAUO,UAAV,EAAsBC,QAAtB,EAAgC;AAChF,UAAI,CAACC,GAAG,CAACL,OAAD,EAAUI,QAAV,CAAJ,IAA2BJ,OAAO,CAACI,QAAD,CAAP,IAAqB,IAApD,EAA0D;AAAE,eAAOD,UAAP;AAAoB;;AAChF,aAAOH,OAAO,CAACI,QAAD,CAAd;AACD,KAHQ,CAAT;AAKA,WAAOT,MAAP;AACD,G,CAED;;;AAgMO,WAASW,QAAT,CAAkBN,OAAlB,EAA+B;AAClC,WAAO,IAAIzC,QAAJ,CAAayC,OAAb,CAAP;AACH;;;;cAFeM;;;;;;;;;;;;AApZZxC,MAAAA,O,GAAU,SAAVA,OAAU,CAAUyC,GAAV,EAAeC,EAAf,EAAmBC,MAAnB,EAA0B;AACtC;AAEAF,QAAAA,GAAG,GAAGG,SAAS,CAAC,CAAD,CAAf;AACAF,QAAAA,EAAE,GAAG,OAAOE,SAAS,CAAC,CAAD,CAAhB,KAAwB,UAAxB,GAAqCA,SAAS,CAAC,CAAD,CAA9C,GAAoD,IAAIC,QAAJ,EAAzD;;AAEA,YAAIC,KAAK,CAACC,OAAN,CAAcN,GAAd,CAAJ,EAAwB;AACtBA,UAAAA,GAAG,CAACzC,OAAJ,CAAY,CAACgD,IAAD,EAAOC,GAAP,EAAYC,KAAZ,KAAoB;AAC9BR,YAAAA,EAAE,CAACM,IAAD,EAAOC,GAAP,CAAF;AACD,WAFD;AAGD,SAJD,MAIO;AACL,eAAK,IAAME,GAAX,IAAkBV,GAAlB,EAAuB;AACrB,gBAAIA,GAAG,CAACW,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3B,kBAAME,OAAO,GAAGZ,GAAG,CAACU,GAAD,CAAnB;AACAT,cAAAA,EAAE,CAACW,OAAD,EAAUF,GAAV,CAAF;AACD;AACF;AACF;AACF,O;;AAEGG,MAAAA,O,GAAU,SAAVA,OAAU,CAAUC,OAAV,EAAmB;AAC/BC,QAAAA,OAAO,CAACC,IAAR,CAAaF,OAAb;AACD,O;;AAEGhB,MAAAA,G,GAAM,SAANA,GAAM,CAAUmB,GAAV,EAAeP,GAAf,EAAoB;AAC5B,eAAOO,GAAG,CAACN,cAAJ,CAAmBD,GAAnB,CAAP;AACD,O;;AAMGM,MAAAA,I,GAAO,SAASA,IAAT,CAAcF,OAAd,EAAuB;AAChCD,QAAAA,OAAO,CAACC,OAAD,CAAP;AACD,O;;AAEG3D,MAAAA,O,GAAU+D,MAAM,CAACC,SAAP,CAAiBhE,O;AAC3Ba,MAAAA,K,GAAQkD,MAAM,CAACC,SAAP,CAAiBnD,K,EAE7B;AACA;;AACIY,MAAAA,S,GAAY,M;;AAEZwC,MAAAA,mB,GAAsB,SAAtBA,mBAAsB,CAAUC,CAAV,EAAa;AACrC,YAAIC,OAAO,GAAGD,CAAC,GAAG,GAAlB;AACA,YAAIE,GAAG,GAAGD,OAAO,GAAG,EAApB;;AACA,YAAIA,OAAO,KAAK,EAAZ,IAAkBC,GAAG,KAAK,CAA9B,EAAiC;AAC/B,iBAAO,CAAP;AACD;;AACD,YAAI,KAAKA,GAAL,IAAYA,GAAG,IAAI,CAAnB,IAAwB,EAAED,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAA9B,CAA5B,EAA+D;AAC7D,iBAAO,CAAP;AACD;;AACD,eAAO,CAAP;AACD,O;;AAEG9B,MAAAA,kB,GAAqB;AACvB;AACAnB,QAAAA,WAAW,EAAE;AACXmD,UAAAA,MAAM,EAAE,gBAAUH,CAAV,EAAa;AACnB;AACA,gBAAIA,CAAC,GAAG,CAAR,EAAW;AAAE,qBAAOA,CAAP;AAAW;;AACxB,gBAAIC,OAAO,GAAGD,CAAC,GAAG,GAAlB;AACA,gBAAIC,OAAO,IAAI,CAAX,IAAgBA,OAAO,IAAI,EAA/B,EAAmC,OAAO,CAAP;AACnC,mBAAOA,OAAO,IAAI,EAAX,GAAgB,CAAhB,GAAoB,CAA3B;AACD,WAPU;AAQXG,UAAAA,eAAe,EAAEL,mBARN;AASXM,UAAAA,OAAO,EAAE,mBAAY;AAAE,mBAAO,CAAP;AAAW,WATvB;AAUXC,UAAAA,QAAQ,EAAEP,mBAVC;AAWXQ,UAAAA,MAAM,EAAE,gBAAUP,CAAV,EAAa;AAAE,mBAAOA,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAnB;AAAuB,WAXnC;AAYXQ,UAAAA,MAAM,EAAE,gBAAUR,CAAV,EAAa;AAAE,mBAAOA,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAArB;AAAyB,WAZrC;AAaXS,UAAAA,OAAO,EAAEV,mBAbE;AAcXW,UAAAA,UAAU,EAAE,oBAAUV,CAAV,EAAa;AACvB,gBAAIA,CAAC,GAAG,EAAJ,KAAW,CAAX,IAAgBA,CAAC,GAAG,GAAJ,KAAY,EAAhC,EAAoC;AAAE,qBAAO,CAAP;AAAW;;AACjD,mBAAOA,CAAC,GAAG,EAAJ,IAAU,CAAV,IAAeA,CAAC,GAAG,EAAJ,IAAU,CAAzB,KAA+BA,CAAC,GAAG,GAAJ,GAAU,EAAV,IAAgBA,CAAC,GAAG,GAAJ,GAAU,EAAzD,IAA+D,CAA/D,GAAmE,CAA1E;AACD,WAjBU;AAkBXW,UAAAA,KAAK,EAAE,eAAUX,CAAV,EAAa;AAClB,gBAAIA,CAAC,KAAK,CAAV,EAAa;AAAE,qBAAO,CAAP;AAAW;;AAC1B,mBAAQA,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAhB,GAAqB,CAArB,GAAyB,CAAhC;AACD,WArBU;AAsBXY,UAAAA,MAAM,EAAE,gBAAUZ,CAAV,EAAa;AACnB,gBAAIA,CAAC,KAAK,CAAV,EAAa;AAAE,qBAAO,CAAP;AAAW;;AAC1B,gBAAIE,GAAG,GAAGF,CAAC,GAAG,EAAd;AACA,mBAAO,KAAKE,GAAL,IAAYA,GAAG,IAAI,CAAnB,KAAyBF,CAAC,GAAG,GAAJ,GAAU,EAAV,IAAgBA,CAAC,GAAG,GAAJ,IAAW,EAApD,IAA0D,CAA1D,GAA8D,CAArE;AACD,WA1BU;AA2BXa,UAAAA,SAAS,EAAE,mBAAUb,CAAV,EAAa;AAAE,mBAAQA,CAAC,GAAG,EAAJ,KAAW,CAAX,IAAgBA,CAAC,GAAG,GAAJ,KAAY,EAA7B,GAAmC,CAAnC,GAAuC,CAA9C;AAAkD,WA3BjE;AA4BXc,UAAAA,SAAS,EAAE,mBAAUd,CAAV,EAAa;AACtB,gBAAIC,OAAO,GAAGD,CAAC,GAAG,GAAlB;;AACA,gBAAIC,OAAO,KAAK,CAAhB,EAAmB;AACjB,qBAAO,CAAP;AACD;;AACD,gBAAIA,OAAO,KAAK,CAAhB,EAAmB;AACjB,qBAAO,CAAP;AACD;;AACD,gBAAIA,OAAO,KAAK,CAAZ,IAAiBA,OAAO,KAAK,CAAjC,EAAoC;AAClC,qBAAO,CAAP;AACD;;AACD,mBAAO,CAAP;AACD;AAxCU,SAFU;AA6CvB;AACA;AACA;AACAvD,QAAAA,qBAAqB,EAAE;AACrByD,UAAAA,MAAM,EAAE,CAAC,IAAD,CADa;AAErBC,UAAAA,eAAe,EAAE,CAAC,YAAD,EAAe,YAAf,EAA6B,QAA7B,EAAuC,OAAvC,CAFI;AAGrBC,UAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,OAAP,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,OAA5B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,OAAvD,EAAgE,IAAhE,CAHY;AAIrBC,UAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,OAAP,CAJW;AAKrBE,UAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,OAAjD,EAA0D,IAA1D,EAAgE,OAAhE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,CALa;AAMrBD,UAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CANa;AAOrBE,UAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,OAAP,CAPY;AAQrBC,UAAAA,UAAU,EAAE,CAAC,IAAD,CARS;AASrBC,UAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,OAAP,EAAgB,IAAhB,CATc;AAUrBC,UAAAA,MAAM,EAAE,CAAC,IAAD,CAVa;AAWrBC,UAAAA,SAAS,EAAE,CAAC,IAAD,CAXU;AAYrBC,UAAAA,SAAS,EAAE,CAAC,OAAD;AAZU;AAhDA,O;AAmGrB7C,MAAAA,iB,GAAoB,a;;0BA2DXtC,Q,GAAN,MAAMA,QAAN,CAAe;AACW,eAAf+B,eAAe,CAACC,MAAD,EAASC,aAAT,EAAwBpB,MAAxB,EAAgC;AACzD;AACA,iBAAOkB,eAAe,CAACC,MAAD,EAASC,aAAT,EAAwBpB,MAAxB,CAAtB;AACH;;AASDuE,QAAAA,WAAW,CAAE3C,OAAF,EAAc;AAAA,eAPlB4C,OAOkB,GAPR,EAOQ;AAAA,eANlBzE,WAMkB,GANJ,EAMI;AAAA,eALlB0E,aAKkB,GALF,EAKE;AAAA,eAJlBC,YAIkB,GAJH,IAIG;AAAA,eAHlBvB,IAGkB,GAHX,IAGW;AAAA,eAFlB9B,UAEkB;AACrB,cAAIT,IAAI,GAAGgB,OAAO,IAAI,EAAtB;AACA,eAAK+C,MAAL,CAAY/D,IAAI,CAAC4D,OAAL,IAAgB,EAA5B;AACA,eAAKC,aAAL,GAAqB7D,IAAI,CAACZ,MAAL,IAAe,IAApC;AACA,cAAI4E,YAAY,GAAGhE,IAAI,CAACgE,YAAL,GAAoB1D,eAApB,GAAsC,IAAzD;AACA,eAAKwD,YAAL,GAAoB,OAAO9D,IAAI,CAAC8D,YAAZ,KAA6B,UAA7B,GAA0C9D,IAAI,CAAC8D,YAA/C,GAA8DE,YAAlF;AACA,eAAKzB,IAAL,GAAYvC,IAAI,CAACuC,IAAL,IAAaA,IAAzB;AACA,eAAK9B,UAAL,GAAkBV,mBAAmB,CAACC,IAAI,CAACiE,aAAN,CAArC;AACA,eAAK9E,WAAL,GAAmBa,IAAI,CAACb,WAAL,IAAoB4B,kBAAvC;AACH,SAtBiB,CAwBlB;AACA;AACA;;;AACOM,QAAAA,GAAG,CAACY,GAAD,EAAM;AACZ,iBAAOZ,GAAG,CAAC,KAAKuC,OAAN,EAAe3B,GAAf,CAAV;AACH,SA7BiB,CA8BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACOiC,QAAAA,CAAC,CAACjC,GAAD,EAAMjB,OAAN,EAAe;AACnB,cAAIT,MAAJ,EAAYI,MAAZ;AACA,cAAIX,IAAI,GAAGgB,OAAO,IAAI,IAAX,GAAkB,EAAlB,GAAuBA,OAAlC;;AACA,cAAI,OAAO,KAAK4C,OAAL,CAAa3B,GAAb,CAAP,KAA6B,QAAjC,EAA2C;AACvC1B,YAAAA,MAAM,GAAG,KAAKqD,OAAL,CAAa3B,GAAb,CAAT;AACH,WAFD,MAEO,IAAI,OAAOjC,IAAI,CAACmE,CAAZ,KAAkB,QAAtB,EAAgC;AACnC5D,YAAAA,MAAM,GAAGP,IAAI,CAACmE,CAAd;AACH,WAFM,MAEA,IAAI,KAAKL,YAAT,EAAuB;AAC1B,gBAAIA,YAAY,GAAG,KAAKA,YAAxB;AACAnD,YAAAA,MAAM,GAAGmD,YAAY,CAAC7B,GAAD,EAAMjC,IAAN,EAAY,KAAK6D,aAAjB,EAAgC,KAAKpD,UAArC,EAAiD,KAAKtB,WAAtD,CAArB;AACH,WAHM,MAGA;AACH,iBAAKoD,IAAL,CAAU,mCAAmCN,GAAnC,GAAyC,GAAnD;AACAtB,YAAAA,MAAM,GAAGsB,GAAT;AACH;;AACD,cAAI,OAAO1B,MAAP,KAAkB,QAAtB,EAAgC;AAC5BI,YAAAA,MAAM,GAAGL,eAAe,CAACC,MAAD,EAASP,IAAT,EAAe,KAAK6D,aAApB,EAAmC,KAAKpD,UAAxC,EAAoD,KAAKtB,WAAzD,CAAxB;AACH;;AACD,iBAAOwB,MAAP;AACH,SAzEiB,CA2ElB;AACA;AACA;AACA;AACA;;;AACAjC,QAAAA,OAAO,CAAC0F,UAAD,EAAa;AAChB,eAAKC,KAAL;AACA,eAAKN,MAAL,CAAYK,UAAZ;AACH,SAnFiB,CAsFlB;AACA;AACA;AACA;AACA;;;AACAC,QAAAA,KAAK,GAAG;AACJ,eAAKT,OAAL,GAAe,EAAf;AACH,SA7FiB,CA+FlB;AACA;AACA;;;AACAxE,QAAAA,MAAM,CAACkF,SAAD,EAAY;AACd,cAAIA,SAAJ,EAAe,KAAKT,aAAL,GAAqBS,SAArB;AACf,iBAAO,KAAKT,aAAZ;AACH,SArGiB,CAuGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,QAAAA,MAAM,CAACQ,WAAD,EAActE,MAAd,EAAsB;AACxB,cAAIuE,KAAK,GAAG,IAAZ;;AACA1F,UAAAA,OAAO,CAACyF,WAAD,EAAc,UAAUhE,MAAV,EAAkB0B,GAAlB,EAAuB;AACxC,gBAAIwC,WAAW,GAAGxE,MAAM,GAAGA,MAAM,GAAG,GAAT,GAAegC,GAAlB,GAAwBA,GAAhD;;AACA,gBAAI,OAAO1B,MAAP,KAAkB,QAAtB,EAAgC;AAC5BiE,cAAAA,KAAK,CAACT,MAAN,CAAaxD,MAAb,EAAqBkE,WAArB;AACH,aAFD,MAEO;AACHD,cAAAA,KAAK,CAACZ,OAAN,CAAca,WAAd,IAA6BlE,MAA7B;AACH;AACJ,WAPM,EAOJ,IAPI,CAAP;AAQH,SAlKiB,CAoKlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAmE,QAAAA,KAAK,CAACH,WAAD,EAActE,MAAd,EAAsB;AACvB,cAAI,OAAOsE,WAAP,KAAuB,QAA3B,EAAqC;AACjC,mBAAO,KAAKX,OAAL,CAAaW,WAAb,CAAP;AACH,WAFD,MAEO;AACHzF,YAAAA,OAAO,CAACyF,WAAD,EAAc,UAAUhE,MAAV,EAAkB0B,GAAlB,EAAuB;AACxC,kBAAIwC,WAAW,GAAGxE,MAAM,GAAGA,MAAM,GAAG,GAAT,GAAegC,GAAlB,GAAwBA,GAAhD;;AACA,kBAAI,OAAO1B,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,qBAAKmE,KAAL,CAAWnE,MAAX,EAAmBkE,WAAnB;AACH,eAFD,MAEO;AACH,uBAAO,KAAKb,OAAL,CAAaa,WAAb,CAAP;AACH;AACJ,aAPM,EAOJ,IAPI,CAAP;AAQH;AACJ;;AA5LiB,O","sourcesContent":["'use strict';\n\n// var forEach = require('for-each');\n// var warning = require('warning');\n// var has = require('has');\n// var trim = require('string.prototype.trim');\n\nvar forEach = function (arr, fn, target){\n  // var arr = Array.isArray(arguments[0]) ? arguments[0] : new Array;\n\n  arr = arguments[0];\n  fn = typeof arguments[1] === 'function' ? arguments[1] : new Function;\n\n  if (Array.isArray(arr)) {\n    arr.forEach((item, idx, array)=>{\n      fn(item, idx);\n    })\n  } else {\n    for (const key in arr) {\n      if (arr.hasOwnProperty(key)) {\n        const element = arr[key];\n        fn(element, key);\n      }\n    }\n  }\n}\n\nvar warning = function (message) {\n  console.warn(message);\n}\n\nvar has = function (obj, key) {\n  return obj.hasOwnProperty(key);\n}\n\nfunction trim(x) {\n  return x.replace(/^\\s+|\\s+$/gm,'');\n}\n\nvar warn = function warn(message) {\n  warning(message);\n};\n\nvar replace = String.prototype.replace;\nvar split = String.prototype.split;\n\n// #### Pluralization methods\n// The string that separates the different phrase possibilities.\nvar delimiter = '||||';\n\nvar russianPluralGroups = function (n) {\n  var lastTwo = n % 100;\n  var end = lastTwo % 10;\n  if (lastTwo !== 11 && end === 1) {\n    return 0;\n  }\n  if (2 <= end && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n    return 1;\n  }\n  return 2;\n};\n\nvar defaultPluralRules = {\n  // Mapping from pluralization group plural logic.\n  pluralTypes: {\n    arabic: function (n) {\n      // http://www.arabeyes.org/Plural_Forms\n      if (n < 3) { return n; }\n      var lastTwo = n % 100;\n      if (lastTwo >= 3 && lastTwo <= 10) return 3;\n      return lastTwo >= 11 ? 4 : 5;\n    },\n    bosnian_serbian: russianPluralGroups,\n    chinese: function () { return 0; },\n    croatian: russianPluralGroups,\n    french: function (n) { return n > 1 ? 1 : 0; },\n    german: function (n) { return n !== 1 ? 1 : 0; },\n    russian: russianPluralGroups,\n    lithuanian: function (n) {\n      if (n % 10 === 1 && n % 100 !== 11) { return 0; }\n      return n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19) ? 1 : 2;\n    },\n    czech: function (n) {\n      if (n === 1) { return 0; }\n      return (n >= 2 && n <= 4) ? 1 : 2;\n    },\n    polish: function (n) {\n      if (n === 1) { return 0; }\n      var end = n % 10;\n      return 2 <= end && end <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n    },\n    icelandic: function (n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; },\n    slovenian: function (n) {\n      var lastTwo = n % 100;\n      if (lastTwo === 1) {\n        return 0;\n      }\n      if (lastTwo === 2) {\n        return 1;\n      }\n      if (lastTwo === 3 || lastTwo === 4) {\n        return 2;\n      }\n      return 3;\n    }\n  },\n\n  // Mapping from pluralization group to individual language codes/locales.\n  // Will look up based on exact match, if not found and it's a locale will parse the locale\n  // for language code, and if that does not exist will default to 'en'\n  pluralTypeToLanguages: {\n    arabic: ['ar'],\n    bosnian_serbian: ['bs-Latn-BA', 'bs-Cyrl-BA', 'srl-RS', 'sr-RS'],\n    chinese: ['id', 'id-ID', 'ja', 'ko', 'ko-KR', 'lo', 'ms', 'th', 'th-TH', 'zh'],\n    croatian: ['hr', 'hr-HR'],\n    german: ['fa', 'da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hi-IN', 'hu', 'hu-HU', 'it', 'nl', 'no', 'pt', 'sv', 'tr'],\n    french: ['fr', 'tl', 'pt-br'],\n    russian: ['ru', 'ru-RU'],\n    lithuanian: ['lt'],\n    czech: ['cs', 'cs-CZ', 'sk'],\n    polish: ['pl'],\n    icelandic: ['is'],\n    slovenian: ['sl-SL']\n  }\n};\n\nfunction langToTypeMap(mapping) {\n  var ret = {};\n  forEach(mapping, function (langs, type) {\n    forEach(langs, function (lang) {\n      ret[lang] = type;\n    }, this);\n  }, this);\n  return ret;\n}\n\nfunction pluralTypeName(pluralRules, locale) {\n  var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);\n  //@ts-ignore\n  return langToPluralType[locale] || langToPluralType[split.call(locale, /-/, 1)[0]] || langToPluralType.en;\n}\n\nfunction pluralTypeIndex(pluralRules, locale, count) {\n  return pluralRules.pluralTypes[pluralTypeName(pluralRules, locale)](count);\n}\n\nfunction escape(token) {\n  return token.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction constructTokenRegex(opts) {\n  var prefix = (opts && opts.prefix) || '%{';\n  var suffix = (opts && opts.suffix) || '}';\n\n  if (prefix === delimiter || suffix === delimiter) {\n    throw new RangeError('\"' + delimiter + '\" token is reserved for pluralization');\n  }\n\n  return new RegExp(escape(prefix) + '(.*?)' + escape(suffix), 'g');\n}\n\nvar defaultTokenRegex = /%\\{(.*?)\\}/g;\n\n// ### transformPhrase(phrase, substitutions, locale)\n//\n// Takes a phrase string and transforms it by choosing the correct\n// plural form and interpolating it.\n//\n//     transformPhrase('Hello, %{name}!', {name: 'Spike'});\n//     // \"Hello, Spike!\"\n//\n// The correct plural form is selected if substitutions.smart_count\n// is set. You can pass in a number instead of an Object as `substitutions`\n// as a shortcut for `smart_count`.\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 1}, 'en');\n//     // \"1 new message\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 2}, 'en');\n//     // \"2 new messages\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', 5, 'en');\n//     // \"5 new messages\"\n//\n// You should pass in a third argument, the locale, to specify the correct plural type.\n// It defaults to `'en'` with 2 plural forms.\nfunction transformPhrase(phrase, substitutions, locale, tokenRegex, pluralRules) {\n  if (typeof phrase !== 'string') {\n    throw new TypeError('Polyglot.transformPhrase expects argument #1 to be string');\n  }\n\n  if (substitutions == null) {\n    return phrase;\n  }\n\n  var result = phrase;\n  var interpolationRegex = tokenRegex || defaultTokenRegex;\n  var pluralRulesOrDefault = pluralRules || defaultPluralRules;\n\n  // allow number as a pluralization shortcut\n  var options = typeof substitutions === 'number' ? { smart_count: substitutions } : substitutions;\n\n  // Select plural form: based on a phrase text that contains `n`\n  // plural forms separated by `delimiter`, a `locale`, and a `substitutions.smart_count`,\n  // choose the correct plural form. This is only done if `count` is set.\n  if (options.smart_count != null && result) {\n    var texts = split.call(result, delimiter);\n    result = trim(texts[pluralTypeIndex(pluralRulesOrDefault, locale || 'en', options.smart_count)] || texts[0]);\n  }\n\n  // Interpolate: Creates a `RegExp` object for each interpolation placeholder.\n  result = replace.call(result, interpolationRegex, function (expression, argument) {\n    if (!has(options, argument) || options[argument] == null) { return expression; }\n    return options[argument];\n  });\n\n  return result;\n}\n\n// ### Polyglot class constructor\nexport class Polyglot {\n    public static transformPhrase(phrase, substitutions, locale) {\n        //@ts-ignore\n        return transformPhrase(phrase, substitutions, locale);\n    }\n\n    public phrases = {};\n    public pluralRules = {};\n    public currentLocale = '';\n    public onMissingKey = null;\n    public warn = null;\n    public tokenRegex: RegExp;\n\n    constructor (options: {}){\n        var opts = options || {};\n        this.extend(opts.phrases || {});\n        this.currentLocale = opts.locale || 'en';\n        var allowMissing = opts.allowMissing ? transformPhrase : null;\n        this.onMissingKey = typeof opts.onMissingKey === 'function' ? opts.onMissingKey : allowMissing;\n        this.warn = opts.warn || warn;\n        this.tokenRegex = constructTokenRegex(opts.interpolation);\n        this.pluralRules = opts.pluralRules || defaultPluralRules;\n    }\n\n    // ### polyglot.has(key)\n    //\n    // Check if polyglot has a translation for given key\n    public has(key) {\n        return has(this.phrases, key);\n    }\n    // ### polyglot.t(key, options)\n    //\n    // The most-used method. Provide a key, and `t` will return the\n    // phrase.\n    //\n    //     polyglot.t(\"hello\");\n    //     => \"Hello\"\n    //\n    // The phrase value is provided first by a call to `polyglot.extend()` or\n    // `polyglot.replace()`.\n    //\n    // Pass in an object as the second argument to perform interpolation.\n    //\n    //     polyglot.t(\"hello_name\", {name: \"Spike\"});\n    //     => \"Hello, Spike\"\n    //\n    // If you like, you can provide a default value in case the phrase is missing.\n    // Use the special option key \"_\" to specify a default.\n    //\n    //     polyglot.t(\"i_like_to_write_in_language\", {\n    //       _: \"I like to write in %{language}.\",\n    //       language: \"JavaScript\"\n    //     });\n    //     => \"I like to write in JavaScript.\"\n    //\n    public t(key, options) {\n        var phrase, result;\n        var opts = options == null ? {} : options;\n        if (typeof this.phrases[key] === 'string') {\n            phrase = this.phrases[key];\n        } else if (typeof opts._ === 'string') {\n            phrase = opts._;\n        } else if (this.onMissingKey) {\n            var onMissingKey = this.onMissingKey;\n            result = onMissingKey(key, opts, this.currentLocale, this.tokenRegex, this.pluralRules);\n        } else {\n            this.warn('Missing translation for key: \"' + key + '\"');\n            result = key;\n        }\n        if (typeof phrase === 'string') {\n            result = transformPhrase(phrase, opts, this.currentLocale, this.tokenRegex, this.pluralRules);\n        }\n        return result;\n    }\n\n    // ### polyglot.replace(phrases)\n    //\n    // Completely replace the existing phrases with a new set of phrases.\n    // Normally, just use `extend` to add more phrases, but under certain\n    // circumstances, you may want to make sure no old phrases are lying around.\n    replace(newPhrases) {\n        this.clear();\n        this.extend(newPhrases);\n    }\n\n\n    // ### polyglot.clear()\n    //\n    // Clears all phrases. Useful for special cases, such as freeing\n    // up memory if you have lots of phrases but no longer need to\n    // perform any translation. Also used internally by `replace`.\n    clear() {\n        this.phrases = {};\n    }\n\n    // ### polyglot.locale([locale])\n    //\n    // Get or set locale. Internally, Polyglot only uses locale for pluralization.\n    locale(newLocale) {\n        if (newLocale) this.currentLocale = newLocale;\n        return this.currentLocale;\n    }\n\n    // ### polyglot.extend(phrases)\n    //\n    // Use `extend` to tell Polyglot how to translate a given key.\n    //\n    //     polyglot.extend({\n    //       \"hello\": \"Hello\",\n    //       \"hello_name\": \"Hello, %{name}\"\n    //     });\n    //\n    // The key can be any string.  Feel free to call `extend` multiple times;\n    // it will override any phrases with the same key, but leave existing phrases\n    // untouched.\n    //\n    // It is also possible to pass nested phrase objects, which get flattened\n    // into an object with the nested keys concatenated using dot notation.\n    //\n    //     polyglot.extend({\n    //       \"nav\": {\n    //         \"hello\": \"Hello\",\n    //         \"hello_name\": \"Hello, %{name}\",\n    //         \"sidebar\": {\n    //           \"welcome\": \"Welcome\"\n    //         }\n    //       }\n    //     });\n    //\n    //     console.log(polyglot.phrases);\n    //     // {\n    //     //   'nav.hello': 'Hello',\n    //     //   'nav.hello_name': 'Hello, %{name}',\n    //     //   'nav.sidebar.welcome': 'Welcome'\n    //     // }\n    //\n    // `extend` accepts an optional second argument, `prefix`, which can be used\n    // to prefix every key in the phrases object with some string, using dot\n    // notation.\n    //\n    //     polyglot.extend({\n    //       \"hello\": \"Hello\",\n    //       \"hello_name\": \"Hello, %{name}\"\n    //     }, \"nav\");\n    //\n    //     console.log(polyglot.phrases);\n    //     // {\n    //     //   'nav.hello': 'Hello',\n    //     //   'nav.hello_name': 'Hello, %{name}'\n    //     // }\n    //\n    // This feature is used internally to support nested phrase objects.\n    extend(morePhrases, prefix) {\n        var _this = this;\n        forEach(morePhrases, function (phrase, key) {\n            var prefixedKey = prefix ? prefix + '.' + key : key;\n            if (typeof phrase === 'object') {\n                _this.extend(phrase, prefixedKey);\n            } else {\n                _this.phrases[prefixedKey] = phrase;\n            }\n        }, this);\n    }\n\n    // ### polyglot.unset(phrases)\n    // Use `unset` to selectively remove keys from a polyglot instance.\n    //\n    //     polyglot.unset(\"some_key\");\n    //     polyglot.unset({\n    //       \"hello\": \"Hello\",\n    //       \"hello_name\": \"Hello, %{name}\"\n    //     });\n    //\n    // The unset method can take either a string (for the key), or an object hash with\n    // the keys that you would like to unset.\n    unset(morePhrases, prefix) {\n        if (typeof morePhrases === 'string') {\n            delete this.phrases[morePhrases];\n        } else {\n            forEach(morePhrases, function (phrase, key) {\n                var prefixedKey = prefix ? prefix + '.' + key : key;\n                if (typeof phrase === 'object') {\n                    this.unset(phrase, prefixedKey);\n                } else {\n                    delete this.phrases[prefixedKey];\n                }\n            }, this);\n        }\n    }\n}\n\nexport function polyglot(options: {}) {\n    return new Polyglot(options);\n}\n"]}