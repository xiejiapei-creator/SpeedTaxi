{"version":3,"sources":["file:///Users/xiejiapei/Documents/Car/assets/script/framework/eventListener.ts"],"names":["error","log","_decorator","ccclass","property","oneToOneListener","constructor","supportEvent","handle","on","eventName","handler","target","off","oldObj","dispatchEvent","hasOwnProperty","objHandler","args","i","arguments","length","push","apply","setSupportEventList","arrSupportEvent","Array","eventListener","getBaseClass","type"],"mappings":";;;;;;;;AAUSA,MAAAA,K,OAAAA,K;AAAOC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,U,OAAAA,U;;;;;;;OACf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBF,U;AAUxBG,MAAAA,gB,WADLF,OAAO,CAAC,kBAAD,C,gBAAR,MACME,gBADN,CACuB;AAInBC,QAAAA,WAAW,GAAE;AAAA,eAHbC,YAGa,GAHO,EAGP;AAAA,eAFbC,MAEa,GAFO,EAEP;AACT,eAAKD,YAAL,GAAoB,IAApB;AACH;;AAEDE,QAAAA,EAAE,CAAEC,SAAF,EAAqBC,OAArB,EAAwCC,MAAxC,EAAsD;AACpD,eAAKJ,MAAL,CAAYE,SAAZ,IAAyB;AAAEC,YAAAA,OAAO,EAAEA,OAAX;AAAoBC,YAAAA,MAAM,EAAEA;AAA5B,WAAzB;AACH;;AAEDC,QAAAA,GAAG,CAAEH,SAAF,EAAqBC,OAArB,EAAwC;AACvC,cAAMG,MAAM,GAAG,KAAKN,MAAL,CAAYE,SAAZ,CAAf;;AACA,cAAII,MAAM,IAAIA,MAAM,CAACH,OAAjB,IAA4BG,MAAM,CAACH,OAAP,KAAmBA,OAAnD,EAA4D;AACxD,mBAAO,KAAKH,MAAL,CAAYE,SAAZ,CAAP;AACH;AACJ;;AAEDK,QAAAA,aAAa,CAAEL,SAAF,EAAqB;AAC9B,cAAI,KAAKH,YAAL,KAAsB,IAAtB,IAA8B,CAAC,KAAKA,YAAL,CAAkBS,cAAlB,CAAiCN,SAAjC,CAAnC,EAAgF;AAC5EV,YAAAA,KAAK,CAAC,0CAAD,CAAL;AACA;AACH;;AAED,cAAMiB,UAAU,GAAG,KAAKT,MAAL,CAAYE,SAAZ,CAAnB;AACA,cAAMQ,IAAI,GAAG,EAAb;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACvCD,YAAAA,IAAI,CAACI,IAAL,CAAUF,SAAS,CAACD,CAAD,CAAnB;AACH;;AAED,cAAIF,UAAU,CAACN,OAAf,EAAwB;AACpBM,YAAAA,UAAU,CAACN,OAAX,CAAmBY,KAAnB,CAAyBN,UAAU,CAACL,MAApC,EAA4CM,IAA5C;AACH,WAFD,MAEO;AACHjB,YAAAA,GAAG,CAAC,kBAAkBS,SAAlB,GAA8B,mBAA/B,CAAH;AACH;AACJ;;AAEDc,QAAAA,mBAAmB,CAAEC,eAAF,EAA6B;AAC5C,cAAI,EAAEA,eAAe,YAAYC,KAA7B,CAAJ,EAAyC;AACrC1B,YAAAA,KAAK,CAAC,4BAAD,CAAL;AACA,mBAAO,KAAP;AACH;;AAED,eAAKO,YAAL,GAAoB,EAApB;;AACA,eAAK,IAAIY,CAAT,IAAcM,eAAd,EAA+B;AAC3B,gBAAMf,SAAS,GAAGe,eAAe,CAACN,CAAD,CAAjC;AACA,iBAAKZ,YAAL,CAAkBG,SAAlB,IAA+BS,CAA/B;AACH;;AAED,iBAAO,IAAP;AACH;;AAnDkB,O;AAoDtB;;+BAIYQ,a,YADZxB,OAAO,CAAC,eAAD,C,kBAAR,MACawB,aADb,CAC2B;AACG,eAAZC,YAAY,CAAEC,IAAF,EAAe;AACrC,iBAAOxB,gBAAP;AACH;;AAHsB,O","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\nimport { error, log, _decorator } from \"cc\";\nconst { ccclass, property } = _decorator;\n\ninterface IEvent{\n    handler: Function;\n    target?: Node\n}\n\ntype EventList = { [name: string]: IEvent};\n\n@ccclass(\"oneToOneListener\")\nclass oneToOneListener {\n    supportEvent: any = {}\n    handle: EventList = {};\n\n    constructor(){\n        this.supportEvent = null;\n    }\n\n    on (eventName: string, handler: Function, target: Node) {\n        this.handle[eventName] = { handler: handler, target: target };\n    }\n\n    off (eventName: string, handler: Function) {\n        const oldObj = this.handle[eventName];\n        if (oldObj && oldObj.handler && oldObj.handler === handler) {\n            delete this.handle[eventName];\n        }\n    }\n\n    dispatchEvent (eventName: string) {\n        if (this.supportEvent !== null && !this.supportEvent.hasOwnProperty(eventName)) {\n            error(\"please add the event into clientEvent.js\");\n            return;\n        }\n\n        const objHandler = this.handle[eventName];\n        const args = [];\n        for (let i = 1; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n\n        if (objHandler.handler) {\n            objHandler.handler.apply(objHandler.target, args);\n        } else {\n            log(\"not register \" + eventName + \"    callback func\");\n        }\n    }\n\n    setSupportEventList (arrSupportEvent: string[]) {\n        if (!(arrSupportEvent instanceof Array)) {\n            error(\"supportEvent was not array\");\n            return false;\n        }\n\n        this.supportEvent = {};\n        for (let i in arrSupportEvent) {\n            const eventName = arrSupportEvent[i];\n            this.supportEvent[eventName] = i;\n        }\n\n        return true;\n    }\n};\n\n\n@ccclass(\"eventListener\")\nexport class eventListener {\n    public static getBaseClass (type:string) {\n        return oneToOneListener;\n    }\n}\n"]}